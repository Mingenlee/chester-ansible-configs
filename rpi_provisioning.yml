# Initial configuration for the Raspberry Pi that handles my home automation
#
# This playbook just ensures I have my user there, that it is a sudoer and
# that I can ssh with my own key, so I can use it for all other tasks
# in the main playbook (rpi.yml).
#
# Given it will likely be ran when an image was freshly baked, we also use the
# opportunity to bump all packages to latest in distro, configure my chosen
# hostname and give it a good reboot, so it's ready to rumble
#
# To (re)start:
#   - Ensure your router is redirecting desired ports (80, 443, 8123) to
#     this RPi's network adaptor, and that it has a fixed IP
#   - Make your computer forget about old versions of that IP:
#     ssh-keygen -R IP
#   - Download Raspbian lite image and burn to SD with balenaEtecher (or dd)
#   - Before putting the SD card on RPi, mount it and:
#     - Create empty SSH file (touch /Volumes/boot/SSH)
#     - Create wpa_supplicant.conf
#       (model here: https://raspberrypi.stackexchange.com/a/82923/100572)
#   - Unmount, put on RPi and boot it
#   - Wait a bit (it will cycle-boot at least once), then and run the command
#     below (password is raspberry):
#        ansible-playbook rpi_provisioning.yml -i hosts -k

- hosts: raspberrypi
  remote_user: pi
  become: yes
  become_method: sudo
  vars:
    admin_user: chesterbr
    admin_user_key: https://github.com/chesterbr.keys
    host: tv-pi

  roles:
  - chesterbr.user_setup

  tasks:
  - name: Update all packages to latest within distro, then remove unneeded
    block:
      apt: update_cache=yes upgrade=dist
      apt: autoremove=yes

  - name: Configure the hostname
    block:
      - replace:
          dest: "/etc/hosts"
          regexp: "raspberrypi"
          replace: "{{ host }}"
      - hostname:
          name: "{{ host }}"

  - name: Reboot
    reboot:
