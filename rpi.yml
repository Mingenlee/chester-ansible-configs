# Configures the Raspberry Pi that handles my home automation
#
# It assumes my user has already been created by rpi_provisioning.yml

- hosts: raspberrypi
  remote_user: "{{ admin_user }}"
  become: yes
  vars:
    admin_user: chesterbr
    admin_email: cd@pobox.com
    external_hostname: chesterbr.duckdns.org
    backup_password: !vault |
              $ANSIBLE_VAULT;1.1;AES256
              32333432316339373564633937666663323762323834356135396163343361653732346637386365
              3266636330393331636436393936633035383539616535390a306163346136353464636366373938
              34626237613062626636653366346363653662393439613839363661376235363162643939346332
              3265386661626665360a666662336663363265383066623439323061623737336439366335393032
              37323364626232333262663065666430386436336161633565353963663263336537323863623361
              34333136323362343562623338396537363531343530366236323666356536386363316638323038
              66326134636339393761336337633731636631613030386438303230323965653333383239356339
              63643530626335636561633238316630373665393438633861356563306434613462663665346666
              61313535626434633164356430383135386533613231346566373536323934623364326166396364
              37623030636230393637666636383839633461356235656462616132666264333663656435326334
              376631333062666237336238303630623033
  handlers:
  - name: restart ssh
    service: name=ssh state=restarted

  - name: restart unattended-upgrades
    service: name=unattended-upgrades state=restarted

  - name: restart lirc
    service: name=lircd state=restarted

  - name: reboot
    reboot:

  tasks:
  - name: Update packages info (if older than a couple days)
    apt: update_cache=yes cache_valid_time=7200

  - name: Install general utilities
    apt: name={{ packages }} state=present
    vars:
      packages:
        - git               # Required for Ansible git (and for life, IMHO)
        - python-setuptools # Required for Ansible pip ¯\_(ツ)_/¯
        - python3-gpiozero  # Provides pinout (and I ❤️ pinout)

  - name: Install fail2ban.
    block:
      - apt: name=fail2ban state=present
      - service: name=fail2ban state=started enabled=yes

  - name: Update SSH configuration to be more secure (no password/root logins).
    lineinfile:
      dest: "/etc/ssh/sshd_config"
      regexp: "{{ item.regexp }}"
      line: "{{ item.line }}"
      state: present
    with_items:
      - regexp: "^PasswordAuthentication"
        line: "PasswordAuthentication no"
      - regexp: "^PermitRootLogin"
        line: "PermitRootLogin no"
    notify: restart ssh

  # Uncomment if you don't want the local pi user
  # - name: Drop the pi user (we don't need it and can't even use it remotely at this point)
  #   user: name={{ admin_user }} state=absent remove=yes

  - name: Install unattended upgrades package and dependencies.
    apt: name={{ packages }} state=present
    vars:
      packages:
        - unattended-upgrades
        - apt-listchanges
        - bsd-mailx

  - name: Updated unattended-upgrades config to reboot if needed,
          auto-fix, reboot time, email, etc
    lineinfile:
      dest: "/etc/apt/apt.conf.d/50unattended-upgrades"
      regexp: "{{ item.regexp }}"
      line: "{{ item.line }}"
      state: present
    with_items:
      - regexp: "(\/\/)? ?Unattended-Upgrade::AutoFixInterruptedDpkg \""
        line: Unattended-Upgrade::AutoFixInterruptedDpkg "true";
      - regexp: "(\/\/)? ?Unattended-Upgrade::MinimalSteps \""
        line: Unattended-Upgrade::MinimalSteps "true";
      - regexp: "(\/\/)? ?Unattended-Upgrade::Automatic-Reboot \""
        line: Unattended-Upgrade::Automatic-Reboot "true";
      - regexp: "(\/\/)? ?Unattended-Upgrade::Automatic-Reboot-Time \""
        line: Unattended-Upgrade::Automatic-Reboot-Time "02:00";
      - regexp: "(\/\/)? ?Unattended-Upgrade::Mail \""
        line: Unattended-Upgrade::Mail "{{ admin_email }}";
      - regexp: "(\/\/)? ?Unattended-Upgrade::MailOnlyOnError \""
        line: Unattended-Upgrade::MailOnlyOnError "false";
      - regexp: "(\/\/)? ?Unattended-Upgrade::Remove-Unused-Dependencies \""
        line: Unattended-Upgrade::Remove-Unused-Dependencies "true";
    notify: restart unattended-upgrades

  - name: (Re)configure firewall (ufw)
    tags:
      - firewall
    block:
      - apt: name=ufw state=present
      - ufw: rule=allow port={{ item }}
        with_items:
          - 22     # ssh
          - 80     # http    (mostly to generate/renew certs)
          - 443    # https   (mostly to generate/renew certs)
          - 8123   # Home Assistant
      - ufw: state=enabled policy=reject direction=incoming

  - name: Install certbot (so we can have letsencrypt ssl certificates)
    apt: name=certbot state=present

  - name: Create script that generates/renews/copies certificates as needed
    template:
      src: templates/update_and_copy_certificates.sh.j2
      dest: /root/update_and_copy_certificates.sh
      owner: root
      mode: 0700

  - name: Run the script once (so we have certificates to play with)
    command: bash -lc "/root/update_and_copy_certificates.sh"

  - name: Schedule certbot to rebuild the certs when needed \
          (and copy/fix perms so HomeAssistant can use them)
    cron:
      name: Update ssl certificates
      minute: 0
      hour: 4
      weekday: 0 # Sundays
      user: root
      job: /root/update_and_copy_certificates.sh

  - name: Install packages required for Bluetooth
    apt: name={{ packages }} state=present
    vars:
      packages:
        - bluetooth
        - bluez
        - bluez-firmware
        - libbluetooth-dev

  - name: Build and install RF (433Mhz) control software, then enable our user to run it
    block:
      - apt: name=wiringpi state=present
      - git:
          repo: git://github.com/ninjablocks/433Utils.git
          dest: /root/433Utils
          recursive: yes
      - command: make
        args:
          chdir: /root/433Utils/RPi_utils
      - copy:
          src: /root/433Utils/RPi_utils/{{ item }}
          dest: /usr/bin/{{ item }}
          mode: 0755
          remote_src: yes
        with_items:
          - codesend
          - RFSniffer
      - user: name="{{ admin_user }}" groups=gpio append=yes

  - name: Install and configure LIRC (infrared), using GPIO22 for output and GPIO23 for input
    block:
      - apt: name=lirc state=present
      - lineinfile:
           dest: /boot/config.txt
           regexp: "^#? ?dtoverlay="
           line: "dtoverlay=lirc-rpi,gpio_in_pin=23,gpio_out_pin=22"
           state: present
        notify: reboot
      - blockinfile:
          dest: /etc/modules
          block: |
            lirc_dev
            lirc_rpi gpio_in_pin=23 gpio_out_pin=22
        notify: reboot
      - template:
          src: templates/lirc_hardware_conf.j2
          dest: /etc/lirc/hardware.conf
          owner: root
        notify: restart lirc
      - template:
          src: templates/lirc_options.conf.j2
          dest: /etc/lirc/lirc_options.conf
          owner: root
        notify: restart lirc
      - template:
          src: templates/Sharp_LCDTV-845-039-40B0.lircd.conf.j2
          dest: /etc/lirc/lircd.conf.d/Sharp_LCDTV-845-039-40B0.lircd.conf
        notify: restart lirc

  - name: Configure Home Assistant backups
    block:
      - apt: name={{ packages }} state=present
        vars:
          packages:
            - samba-common
            - smbclient
            - samba-common-bin
            - cifs-utils
      - copy:
          content: "{{ backup_password }}"
          dest: /home/{{ admin_user }}/.backup-password
        become: no
      - template:
          src: templates/ha-backup.sh.j2
          dest: /home/{{ admin_user }}/ha-backup.sh
          mode: 0700
        become: no
      - command: bash -lc "./ha-backup.sh restore"
        args:
          chdir: /home/{{ admin_user }}
          creates: /home/{{ admin_user }}/.homeassistant
        become: no
      - cron:
          name: Backup homeassistant configs
          minute: 0
          hour: 2
          user: "{{ admin_user }}"
          job: /home/{{ admin_user }}/ha-backup.sh

  - name: Install Home Assistant (on a virtualenv, on my user)
    block:
      - apt: name={{ packages }} state=present
        vars:
          packages:
            - python3-pip
            - python3-venv
            - build-essential
            - libssl-dev
            - libffi-dev
            - python3-dev
      - pip:
          name: virtualenv
          executable: pip3
      - pip:
          name:
            - wheel
            - homeassistant
          virtualenv: /home/{{ admin_user }}/homeassistant
        become: no
      - template:
          src: templates/homeassistant.service.j2
          dest: /lib/systemd/system/homeassistant.service
          mode: 0644
      - systemd:
          daemon_reload: yes
          name: homeassistant.service
          enabled: true
          state: stopped
        notify: reboot
